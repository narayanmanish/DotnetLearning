static string WildcardCharacters(string str)
    {
        string[] parts = str.Split(' ');
        string wildCard = parts[0];
        string result = parts[1];

        int step = 0;
        for (int i = 0; i < wildCard.Length; i++)
        {
            if (wildCard[i] == '+')
            {
                if (step >= result.Length) return "false";
                step++;
            }
            else if (wildCard[i] == '*')
            {
                int sequenceLength = 3;
                if (i + 1 < wildCard.Length && wildCard[i + 1] == '{')
                {
                    int end = wildCard.IndexOf('}', i);
                    if (end > i)
                    {
                        sequenceLength = int.Parse(wildCard.Substring(i + 2, end - i - 2));
                        i = end;
                    }
                }
                if (step + sequenceLength > result.Length || result.Substring(step, sequenceLength).Distinct().Count() > 1)
                    return "false";
                step += sequenceLength;
            }
        }
        return step == result.Length ? "true" : "false";
    }


//"X", "O", "-", "<>", "-", "O", "-", "<>", "O", "X", "-" 
static int NoughtsDeterminer(string[] strArr)
    {
        int[,] winPatterns =
        {
            {0, 1, 2}, {4, 5, 6}, {8, 9, 10}, // Rows
            {0, 4, 8}, {1, 5, 9}, {2, 6, 10}, // Columns
            {0, 5, 10}, {2, 5, 8}             // Diagonals
        };

        for (int i = 0; i < winPatterns.GetLength(0); i++)
        {
            int a = winPatterns[i, 0], b = winPatterns[i, 1], c = winPatterns[i, 2];
            
            if (strArr[a] == strArr[b] && strArr[a] != "-" && strArr[c] == "-")
                return c;
            if (strArr[a] == strArr[c] && strArr[a] != "-" && strArr[b] == "-")
                return b;
            if (strArr[b] == strArr[c] && strArr[b] != "-" && strArr[a] == "-")
                return a;
        }

        return -1; // No winning move found
    }


static long SquareFigures(int num)
    {
        long length = 1;

        // Base case
        if (num == 1)
        {
            return 0;
        }

        // Getting the length as a value
        for (int x = 0; x < num - 1; x++)
        {
            length *= 10;
        }

        // Getting start number through square root to avoid linear approach
        long start = (long)Math.Sqrt(length);
        long squaredResult = start * start;

        // Iterate from the start integer until the squared result has the same length as input
        while (squaredResult < length)
        {
            start++;
            squaredResult = start * start;
        }

        return start;
    }
