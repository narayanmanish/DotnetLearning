

using System;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    static Timer _timer;
    static bool _isTimerRunning = false;

    static async Task Main()
    {
        Console.WriteLine("‚è≥ Program started...");

        // Define the parameter to pass (e.g., an integer or any object)
        string parameter = "Hello from Timer!";

        // Start Timer (Runs every 10 minutes)
        _timer = new Timer(TimerCallback, parameter, TimeSpan.Zero, TimeSpan.FromMinutes(10));

        // Run Main Function
        await RunMainFunction();

        // Dispose timer and exit
        _timer.Dispose();
        Console.WriteLine("‚úÖ Program finished.");
    }

    // üîπ Main Function (Handles Database Operations)
    static async Task RunMainFunction()
    {
        Console.WriteLine($"üíº Main Function started at: {DateTime.Now}");

        // Simulate Database Work
        Console.WriteLine("üìä Fetching data from database...");

        // Simulate API Call
        await Task.Delay(5000); // Simulate API Response
        Console.WriteLine("üåê Fetching data from API...");

        Console.WriteLine($"üíº Main Function finished at: {DateTime.Now}");
    }

    // ‚è≥ Timer Function (Receives Parameter)
    static void TimerCallback(object state)
    {
        if (_isTimerRunning) return; // Prevent overlapping executions

        _isTimerRunning = true;
        _ = TimerFunction(state); // Pass the parameter to the async function
    }

    static async Task TimerFunction(object state)
    {
        string receivedParameter = state as string; // Cast the parameter

        Console.WriteLine($"‚úÖ Timer function executed at: {DateTime.Now}");
        Console.WriteLine($"üìå Received Parameter: {receivedParameter}");

        try
        {
            await Task.Delay(5000); // Simulate Work

            if (!CheckCondition())
            {
                Console.WriteLine("‚ùå Condition failed. Stopping execution.");
                _timer?.Dispose(); // Stop Timer
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error: {ex.Message}");
        }
        finally
        {
            _isTimerRunning = false;
        }
    }

    // üîé Condition Check Function
    static bool CheckCondition() => true; // Change to `false` to stop execution
}



using System;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    static Timer _timer;
    static bool _isTimerRunning = false;
    static bool _shouldStop = false;

    static async Task Main()
    {
        Console.WriteLine("‚è≥ Program started...");

        // Start Timer (Runs every 10 minutes)
        _timer = new Timer(async _ => await TimerFunction(), null, TimeSpan.Zero, TimeSpan.FromMinutes(10));

        // Run Main Function Without Blocking
        await RunMainFunction();

        Console.ReadLine(); // Keep application running
    }

    // üîπ Main Function (Handles Database Operations Without Blocking)
    static async Task RunMainFunction()
    {
        Console.WriteLine($"üíº Main Function started at: {DateTime.Now}");

        // Simulate Database Work
        //await Task.Delay(5000); // Simulate DB Query (Replace this with actual database logic)
        Console.WriteLine("üìä Fetching data from database...");

        // Simulate API Call
        await Task.Delay(5000); // Simulate API Response
        Console.WriteLine("üåê Fetching data from API...");

        Console.WriteLine($"üíº Main Function finished at: {DateTime.Now}");
    }

    // ‚è≥ Timer Function (Runs Every 10 Minutes)
    static async Task TimerFunction()
    {
        if (_isTimerRunning)
        {
            Console.WriteLine("‚ö†Ô∏è Timer function is already running. Skipping execution.");
            return;
        }

        _isTimerRunning = true;
        Console.WriteLine($"‚úÖ Timer function executed at: {DateTime.Now}");

        try
        {
            // Simulate Work
            await Task.Delay(5000);

            bool result = CheckCondition();
            if (!result)
            {
                Console.WriteLine("‚ùå Condition failed. Stopping execution.");
                _shouldStop = true;
                _timer?.Dispose(); // Stop Timer
                Environment.Exit(0); // Exit Program
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error: {ex.Message}");
        }
        finally
        {
            _isTimerRunning = false;
        }
    }

    // üîé Condition Check Function
    static bool CheckCondition()
    {
        return true; // Change to `false` if you want to stop execution
    }
}
